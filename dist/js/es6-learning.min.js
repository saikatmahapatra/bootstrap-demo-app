let x=10;class Person{constructor(a){this.name(a)}set name(a){if(!(a=a.trim()))throw"Name can not empty";this.name=a}get name(){return this.name}}var saikat=new Person("saikat mahapatra");console.log(saikat.name);class App{constructor(){if(App._instance)throw new Error(App._instance+"App is a singleton class. It cant be instantiate more than once");App._instance=this}start(){console.log("running app")}}var app1=new App,app2=new App;let person=new class{constructor(a){this.name=a}getName(){return"name is"+this.name}}("Saikat Mahapatra");function Animals(a){this.name=a}var cat=new Animals("cat"),dog=(Animals.prototype.eatingHabit=function(a){console.log(this.name+" can eat "+a)},cat.eatingHabit("milk"),new Animals("Dog"));dog.eatingHabit("meat");class Animal{constructor(a){this.name=a}getName(){console.log("parent getName(). name => "+this.name)}static helloworld(){console.log("Hello World")}}class Cat extends Animal{constructor(a){super(a),this.color="red"}getName(){super.getName(),console.log("child getName(). name => "+this.name)}eatingHabit(){console.log("Name of cat "+this.color)}}let redCat=new Cat("red Cat");this.color="black",redCat.getName(),redCat.eatingHabit(),Cat.helloworld(),Animal.helloworld();class User{constructor(a){this.fullName=a,console.log(new.target)}}class Emp extends User{constructor(a,e){super(a),this.role=e}}let sm=new User("saikat mahapatra"),js=new Emp("John Smith","Software Engineer"),add=function(a,e){return a+e};function getUsers(){let a=[];return setTimeout(function(){a=[{name:"saikat",email:"saikat@ex.com"},{name:"john",email:"john@ex.com"},{name:"ram",email:"ram@ex.com"}]},4e3),a}add=(a,e)=>a+e,add=(a,e,t,n)=>{retun(a+e)};